/* app.js
   Single-file JavaScript app que crea una página To-Do completa:
   - Crea DOM y estilos desde JS
   - Agregar / editar / eliminar tareas
   - Marcar completadas
   - Reordenar con drag & drop
   - Persiste en localStorage
*/

/* ---------- Helpers ---------- */
const q = s => document.querySelector(s);
const create = (tag, props = {}, ...children) => {
  const el = document.createElement(tag);
  Object.entries(props).forEach(([k, v]) => {
    if (k === 'class') el.className = v;
    else if (k === 'html') el.innerHTML = v;
    else el.setAttribute(k, v);
  });
  children.flat().forEach(c => {
    if (typeof c === 'string') el.appendChild(document.createTextNode(c));
    else if (c) el.appendChild(c);
  });
  return el;
};

/* ---------- Inject styles ---------- */
const style = create('style', { html: `
  :root{--bg:#0f1724;--card:#0b1220;--accent:#60a5fa;--muted:#94a3b8;--ok:#34d399}
  *{box-sizing:border-box;font-family:Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial}
  body{margin:0;background:linear-gradient(180deg,#071428 0%, #052036 100%);color:#e6eef6;min-height:100vh;display:flex;align-items:center;justify-content:center;padding:28px}
  .card{width:100%;max-width:820px;background:var(--card);border-radius:12px;padding:18px;box-shadow:0 8px 30px rgba(2,6,23,.6)}
  header{display:flex;align-items:center;gap:12px;margin-bottom:12px}
  header h1{margin:0;font-size:20px}
  .meta{color:var(--muted);font-size:13px}
  .inputRow{display:flex;gap:8px;margin-bottom:12px}
  .inputRow input{flex:1;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,.04);background:transparent;color:inherit}
  .btn{padding:10px 12px;border-radius:8px;border:none;cursor:pointer;background:var(--accent);color:#052036;font-weight:600}
  .btn.ghost{background:transparent;border:1px solid rgba(255,255,255,.06);color:var(--muted)}
  .list{display:flex;flex-direction:column;gap:8px}
  .todo{display:flex;align-items:center;gap:10px;padding:10px;border-radius:10px;border:1px solid rgba(255,255,255,.03);background:linear-gradient(180deg, rgba(255,255,255,.01), transparent)}
  .todo.dragging{opacity:.5}
  .todo .text{flex:1}
  .todo .text.done{text-decoration:line-through;color:var(--muted)}
  .actions{display:flex;gap:8px}
  .small{font-size:13px;padding:6px 8px;border-radius:8px}
  footer{display:flex;justify-content:space-between;align-items:center;margin-top:12px;color:var(--muted);font-size:13px}
  @media (max-width:520px){ .card{padding:12px} header h1{font-size:18px} }
`});
document.head.appendChild(style);

/* ---------- App state ---------- */
const STORAGE_KEY = 'mini_todo_v1';
let todos = []; // {id, text, done}

/* ---------- Persistence ---------- */
function load() {
  try {
    const raw = localStorage.getItem(STORAGE_KEY);
    todos = raw ? JSON.parse(raw) : [];
  } catch (e) { todos = []; }
}
function save() { localStorage.setItem(STORAGE_KEY, JSON.stringify(todos)); }

/* ---------- UI Creation ---------- */
const appRoot = create('div', { class: 'card' });

const header = create('header',
  {},
  create('div', {}, create('h1', {}, 'Lista rápida (solo JS)'), create('div', { class: 'meta' }, 'Añade, edita, reordena y guarda localmente.'))
);

const inputRow = create('div', { class: 'inputRow' });
const input = create('input', { placeholder: 'Escribe una tarea y presiona Enter...' });
const addBtn = create('button', { class: 'btn' }, 'Agregar');
inputRow.append(input, addBtn);

const listWrap = create('div', { class: 'list', id: 'todo-list' });

const footer = create('footer',
  {},
  create('div', { id: 'count' }, '0 tareas'),
  create('div', {},
    create('button', { class: 'btn ghost small', id: 'clear-done' }, 'Borrar completadas'),
    create('button', { class: 'btn ghost small', id: 'clear-all' }, 'Borrar todo')
  )
);

appRoot.append(header, inputRow, listWrap, footer);
document.body.appendChild(appRoot);

/* ---------- DOM Helpers ---------- */
function render() {
  // limpiar lista
  listWrap.innerHTML = '';
  todos.forEach((t, idx) => {
    const chk = create('input', { type: 'checkbox' });
    chk.checked = !!t.done;
    chk.addEventListener('change', () => {
      t.done = chk.checked;
      save();
      render();
    });

    const textEl = create('div', { class: 'text' }, t.text);
    if (t.done) textEl.classList.add('done');

    // editar cuando click en texto
    textEl.addEventListener('dblclick', () => {
      const edit = create('input', { value: t.text });
      edit.addEventListener('keydown', e => {
        if (e.key === 'Enter') {
          t.text = edit.value.trim() || t.text;
          save(); render();
        } else if (e.key === 'Escape') render();
      });
      edit.addEventListener('blur', () => { t.text = edit.value.trim() || t.text; save(); render(); });
      const parent = edit.parentElement;
      if (parent) parent.replaceChild(edit, textEl);
      edit.focus();
    });

    const btnEdit = create('button', { class: 'small btn ghost' }, 'Editar');
    btnEdit.addEventListener('click', () => {
      // trigger dblclick edit
      textEl.dispatchEvent(new Event('dblclick'));
    });

    const btnDel = create('button', { class: 'small btn' }, 'Eliminar');
    btnDel.addEventListener('click', () => {
      todos.splice(idx, 1); save(); render();
    });

    const actions = create('div', { class: 'actions' }, btnEdit, btnDel);

    const item = create('div', { class: 'todo', draggable: 'true', 'data-id': t.id }, chk, textEl, actions);

    // Drag & Drop
    item.addEventListener('dragstart', (e) => {
      e.dataTransfer.setData('text/plain', t.id);
      item.classList.add('dragging');
    });
    item.addEventListener('dragend', () => item.classList.remove('dragging'));
    item.addEventListener('dragover', (e) => {
      e.preventDefault();
      const dragging = document.querySelector('.dragging');
      if (!dragging || dragging === item) return;
      const list = listWrap;
      const nodes = Array.from(list.children);
      const draggingIdx = nodes.indexOf(dragging);
      const targetIdx = nodes.indexOf(item);
      if (draggingIdx < targetIdx) list.insertBefore(dragging, item.nextSibling);
      else list.insertBefore(dragging, item);
    });

    listWrap.appendChild(item);
  });

  // update count
  const total = todos.length;
  const done = todos.filter(t => t.done).length;
  q('#count').textContent = `${total} tareas — ${done} terminadas`;
}

/* After a drag reorder in DOM, sync todos array to DOM order */
function syncOrderFromDOM() {
  const nodes = Array.from(listWrap.children);
  const newOrder = nodes.map(n => n.getAttribute('data-id'));
  todos = newOrder.map(id => todos.find(t => t.id === id)).filter(Boolean);
  save();
}

/* ---------- Actions ---------- */
function addTask(text) {
  const trimmed = text.trim();
  if (!trimmed) return;
  todos.unshift({ id: cryptoRandomId(), text: trimmed, done: false });
  save(); render();
}

function cryptoRandomId() {
  // pequeño id único
  return 'id_' + Math.random().toString(36).slice(2, 9);
}

/* ---------- Events ---------- */
addBtn.addEventListener('click', () => { addTask(input.value); input.value = ''; input.focus(); });
input.addEventListener('keydown', (e) => { if (e.key === 'Enter') { addTask(input.value); input.value=''; } });

q('#clear-done').addEventListener('click', () => {
  todos = todos.filter(t => !t.done); save(); render();
});
q('#clear-all').addEventListener('click', () => {
  if (confirm('Borrar TODAS las tareas?')) { todos = []; save(); render(); }
});

// listen to drop to update order
listWrap.addEventListener('drop', (e) => {
  e.preventDefault();
  const dragging = document.querySelector('.dragging');
  if (!dragging) return;
  dragging.classList.remove('dragging');
  syncOrderFromDOM();
});

/* Save order when user stops dragging by pointerup (for touch/mouse) */
document.addEventListener('pointerup', () => {
  if (document.querySelector('.dragging')) {
    document.querySelectorAll('.dragging').forEach(n => n.classList.remove('dragging'));
    syncOrderFromDOM();
  }
});

/* ---------- Init ---------- */
(function init() {
  load();
  // seed if empty
  if (!todos.length) {
    todos = [
      { id: cryptoRandomId(), text: 'Prueba: haz doble click para editar', done: false },
      { id: cryptoRandomId(), text: 'Arrastra para reordenar', done: false },
      { id: cryptoRandomId(), text: 'Marca completada y guarda en localStorage', done: false }
    ];
    save();
  }